{% package main %}

{% func Interface(def *StructDef, defs []*StructDef) %}
export interface {%s def.Name %} {{%= Fields(def, defs) %}}
{% endfunc %}

{% func Fields(def *StructDef, defs []*StructDef) %}
{%- for _, field := range def.Fields -%}
  {%- if field.Embedded -%}
    {%- for _, structDef := range defs -%}
      {%- if structDef.Name == field.Type -%}
        {%s Fields(structDef, defs) %}
      {%- endif -%}
    {%- endfor -%}
  {%- else -%}
    {%s field.Name %}: {%s field.Type %}
  {%- endif -%}
{%- endfor -%}
{%- endfunc %}

{% func JSONRPCService(service *Service) -%}
import JSONRPCService from './JSONRPCService';
{%- for _, method := range service.Methods -%}
{%= Interface(method.RequestDef, service.OtherStructs) -%}
{%= Interface(method.ResponseDef, service.OtherStructs) -%}
{%- endfor -%}
{%- for _, structDef := range service.OtherStructs -%}
{%-= Interface(structDef, service.OtherStructs) -%}
{%- endfor -%}

class {%s service.Name %} extends JSONRPCService {
  {%- for _, method := range service.Methods -%}
    async {%s method.Name %}(args: {%s method.RequestDef.Name %}): Promise<{%s method.ResponseDef.Name %}> {
      return this.jsonrpc<{%s method.ResponseDef.Name %}>("{%s method.Name %}", args);
    }
  {%- endfor -%}
}

const service = new {%s service.Name %}("{%s service.Name %}");
(window as any).{%s service.Name %} = service;
export default service;
{% endfunc %}