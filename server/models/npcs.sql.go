// Code generated by sqlc. DO NOT EDIT.
// source: npcs.sql

package models

import (
	"context"
	"encoding/json"
)

const createNPC = `-- name: CreateNPC :one
INSERT INTO npcs (owner_id, name, definition) VALUES ($1, $2, $3) RETURNING id, owner_id, name, definition, sprite, hash, created_at
`

type CreateNPCParams struct {
	OwnerID    int32
	Name       string
	Definition json.RawMessage
}

func (q *Queries) CreateNPC(ctx context.Context, arg CreateNPCParams) (Npc, error) {
	row := q.db.QueryRowContext(ctx, createNPC, arg.OwnerID, arg.Name, arg.Definition)
	var i Npc
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Definition,
		&i.Sprite,
		&i.Hash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNPC = `-- name: DeleteNPC :exec
DELETE FROM npcs WHERE id = $1 AND owner_id = $2
`

type DeleteNPCParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteNPC(ctx context.Context, arg DeleteNPCParams) error {
	_, err := q.db.ExecContext(ctx, deleteNPC, arg.ID, arg.OwnerID)
	return err
}

const getNPCByID = `-- name: GetNPCByID :one
SELECT id, owner_id, name, definition, sprite, hash, created_at from npcs WHERE id = $1
`

func (q *Queries) GetNPCByID(ctx context.Context, id int32) (Npc, error) {
	row := q.db.QueryRowContext(ctx, getNPCByID, id)
	var i Npc
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Definition,
		&i.Sprite,
		&i.Hash,
		&i.CreatedAt,
	)
	return i, err
}

const searchNPCs = `-- name: SearchNPCs :many
SELECT id, owner_id, name, definition, sprite, hash, created_at FROM npcs WHERE name ilike $1
`

func (q *Queries) SearchNPCs(ctx context.Context, name string) ([]Npc, error) {
	rows, err := q.db.QueryContext(ctx, searchNPCs, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Npc
	for rows.Next() {
		var i Npc
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.Hash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNPC = `-- name: UpdateNPC :exec
UPDATE npcs SET
  name = $3,
  definition = $4,
  sprite = $5
WHERE npcs.id = $1 AND
EXISTS (SELECT true FROM npcs WHERE npcs.id = $1 AND npcs.owner_id = $2)
`

type UpdateNPCParams struct {
	ID         int32
	OwnerID    int32
	Name       string
	Definition json.RawMessage
	Sprite     []byte
}

func (q *Queries) UpdateNPC(ctx context.Context, arg UpdateNPCParams) error {
	_, err := q.db.ExecContext(ctx, updateNPC,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Definition,
		arg.Sprite,
	)
	return err
}
