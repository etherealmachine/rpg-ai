// Code generated by sqlc. DO NOT EDIT.
// source: characters.sql

package models

import (
	"context"
	"encoding/json"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (owner_id, name, definition) VALUES ($1, $2, $3) RETURNING id, owner_id, name, definition, sprite, created_at
`

type CreateCharacterParams struct {
	OwnerID    int32
	Name       string
	Definition json.RawMessage
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.OwnerID, arg.Name, arg.Definition)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Definition,
		&i.Sprite,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters WHERE id = $1 AND owner_id = $2
`

type DeleteCharacterParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteCharacter(ctx context.Context, arg DeleteCharacterParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, arg.ID, arg.OwnerID)
	return err
}

const getCharacterByID = `-- name: GetCharacterByID :one
SELECT id, owner_id, name, definition, sprite, created_at from characters WHERE id = $1
`

func (q *Queries) GetCharacterByID(ctx context.Context, id int32) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterByID, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Definition,
		&i.Sprite,
		&i.CreatedAt,
	)
	return i, err
}

const listCharactersByOwnerID = `-- name: ListCharactersByOwnerID :many
SELECT id, owner_id, name, definition, sprite, created_at FROM characters WHERE owner_id = $1
`

func (q *Queries) ListCharactersByOwnerID(ctx context.Context, ownerID int32) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCharacters = `-- name: SearchCharacters :many
SELECT id, owner_id, name, definition, sprite, created_at FROM characters WHERE name ilike $1
`

func (q *Queries) SearchCharacters(ctx context.Context, name string) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, searchCharacters, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: UpdateCharacter :exec
UPDATE characters SET
  name = $3
WHERE characters.id = $1 AND
EXISTS (SELECT true FROM characters WHERE characters.id = $1 AND characters.owner_id = $2)
`

type UpdateCharacterParams struct {
	ID      int32
	OwnerID int32
	Name    string
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacter, arg.ID, arg.OwnerID, arg.Name)
	return err
}
