// Code generated by sqlc. DO NOT EDIT.
// source: campaigns.sql

package models

import (
	"context"
	"database/sql"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (owner_id, name, description) VALUES ($1, $2, $3) RETURNING id, owner_id, name, description, created_at
`

type CreateCampaignParams struct {
	OwnerID     int32
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign, arg.OwnerID, arg.Name, arg.Description)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns WHERE id = $1 AND owner_id = $2
`

type DeleteCampaignParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteCampaign(ctx context.Context, arg DeleteCampaignParams) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, arg.ID, arg.OwnerID)
	return err
}

const getOwnedCampaignByID = `-- name: GetOwnedCampaignByID :one
SELECT id, owner_id, name, description, created_at FROM campaigns WHERE id = $1 AND owner_id = $2
`

type GetOwnedCampaignByIDParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) GetOwnedCampaignByID(ctx context.Context, arg GetOwnedCampaignByIDParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getOwnedCampaignByID, arg.ID, arg.OwnerID)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCampaignsByOwnerID = `-- name: ListCampaignsByOwnerID :many
SELECT id, owner_id, name, description, created_at FROM campaigns WHERE owner_id = $1
`

func (q *Queries) ListCampaignsByOwnerID(ctx context.Context, ownerID int32) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, listCampaignsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEncountersForCampaign = `-- name: ListEncountersForCampaign :many
SELECT id, campaign_id, name, description, tilemap_id, created_at FROM encounters WHERE campaign_id = $1
`

func (q *Queries) ListEncountersForCampaign(ctx context.Context, campaignID int32) ([]Encounter, error) {
	rows, err := q.db.QueryContext(ctx, listEncountersForCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Encounter
	for rows.Next() {
		var i Encounter
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.Name,
			&i.Description,
			&i.TilemapID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaign = `-- name: UpdateCampaign :exec
UPDATE campaigns SET
  name = COALESCE($3, name),
  description = COALESCE($4, description)
WHERE id = $1 AND owner_id = $2
`

type UpdateCampaignParams struct {
	ID          int32
	OwnerID     int32
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) error {
	_, err := q.db.ExecContext(ctx, updateCampaign,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Description,
	)
	return err
}
