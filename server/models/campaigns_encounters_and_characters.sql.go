// Code generated by sqlc. DO NOT EDIT.
// source: campaigns_encounters_and_characters.sql

package models

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addCharacterToEncounter = `-- name: AddCharacterToEncounter :exec
INSERT INTO encounter_characters (encounter_id, character_id)
SELECT $1, $2
FROM campaigns
WHERE EXISTS (SELECT id FROM campaigns WHERE campaigns.id = $2 AND campaigns.owner_id = $3)
`

type AddCharacterToEncounterParams struct {
	EncounterID int32
	CharacterID int32
	OwnerID     int32
}

func (q *Queries) AddCharacterToEncounter(ctx context.Context, arg AddCharacterToEncounterParams) error {
	_, err := q.db.ExecContext(ctx, addCharacterToEncounter, arg.EncounterID, arg.CharacterID, arg.OwnerID)
	return err
}

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (owner_id, name, description) VALUES ($1, $2, $3) RETURNING id, owner_id, name, description, created_at
`

type CreateCampaignParams struct {
	OwnerID     int32
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign, arg.OwnerID, arg.Name, arg.Description)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (owner_id, name, definition) VALUES ($1, $2, $3) RETURNING id, owner_id, name, definition, sprite, created_at
`

type CreateCharacterParams struct {
	OwnerID    int32
	Name       string
	Definition json.RawMessage
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.OwnerID, arg.Name, arg.Definition)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Definition,
		&i.Sprite,
		&i.CreatedAt,
	)
	return i, err
}

const createEncounter = `-- name: CreateEncounter :one
INSERT INTO encounters (campaign_id, name, description, tilemap_id)
SELECT $1, $2, $3, $4
FROM campaigns
WHERE
  EXISTS (SELECT id FROM campaigns WHERE id = $1 AND campaigns.owner_id = $5)
  AND (EXISTS (SELECT id FROM tilemaps WHERE id = $4 AND tilemaps.owner_id = $5) OR $4 IS NULL)
RETURNING id, campaign_id, name, description, tilemap_id, created_at
`

type CreateEncounterParams struct {
	CampaignID  int32
	Name        string
	Description sql.NullString
	TilemapID   sql.NullInt32
	OwnerID     int32
}

func (q *Queries) CreateEncounter(ctx context.Context, arg CreateEncounterParams) (Encounter, error) {
	row := q.db.QueryRowContext(ctx, createEncounter,
		arg.CampaignID,
		arg.Name,
		arg.Description,
		arg.TilemapID,
		arg.OwnerID,
	)
	var i Encounter
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.Name,
		&i.Description,
		&i.TilemapID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns WHERE id = $1 AND owner_id = $2
`

type DeleteCampaignParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteCampaign(ctx context.Context, arg DeleteCampaignParams) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, arg.ID, arg.OwnerID)
	return err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters WHERE id = $1 AND owner_id = $2
`

type DeleteCharacterParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteCharacter(ctx context.Context, arg DeleteCharacterParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, arg.ID, arg.OwnerID)
	return err
}

const deleteEncounter = `-- name: DeleteEncounter :exec
DELETE FROM encounters
WHERE encounters.id = $1 AND
EXISTS (SELECT id FROM campaigns WHERE campaigns.id = encounters.campaign_id AND owner_id = $2)
`

type DeleteEncounterParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) DeleteEncounter(ctx context.Context, arg DeleteEncounterParams) error {
	_, err := q.db.ExecContext(ctx, deleteEncounter, arg.ID, arg.OwnerID)
	return err
}

const getOwnedCampaignByID = `-- name: GetOwnedCampaignByID :one
SELECT id, owner_id, name, description, created_at FROM campaigns WHERE id = $1 AND owner_id = $2
`

type GetOwnedCampaignByIDParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) GetOwnedCampaignByID(ctx context.Context, arg GetOwnedCampaignByIDParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getOwnedCampaignByID, arg.ID, arg.OwnerID)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCampaignsByOwnerID = `-- name: ListCampaignsByOwnerID :many
SELECT id, owner_id, name, description, created_at FROM campaigns WHERE owner_id = $1
`

func (q *Queries) ListCampaignsByOwnerID(ctx context.Context, ownerID int32) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, listCampaignsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersByOwnerID = `-- name: ListCharactersByOwnerID :many
SELECT id, owner_id, name, definition, sprite, created_at FROM characters WHERE owner_id = $1
`

func (q *Queries) ListCharactersByOwnerID(ctx context.Context, ownerID int32) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersForEncounter = `-- name: ListCharactersForEncounter :many
SELECT characters.id, characters.owner_id, characters.name, characters.definition, characters.sprite, characters.created_at FROM encounter_characters
JOIN characters ON characters.id = character_id
WHERE encounter_id = $1
`

func (q *Queries) ListCharactersForEncounter(ctx context.Context, encounterID int32) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersForEncounter, encounterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEncountersForCampaign = `-- name: ListEncountersForCampaign :many
SELECT id, campaign_id, name, description, tilemap_id, created_at FROM encounters WHERE campaign_id = $1
`

func (q *Queries) ListEncountersForCampaign(ctx context.Context, campaignID int32) ([]Encounter, error) {
	rows, err := q.db.QueryContext(ctx, listEncountersForCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Encounter
	for rows.Next() {
		var i Encounter
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.Name,
			&i.Description,
			&i.TilemapID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCharacterFromEncounter = `-- name: RemoveCharacterFromEncounter :exec
DELETE FROM encounter_characters
WHERE encounter_characters.id = $1 AND
EXISTS (SELECT id FROM campaigns WHERE campaigns.id = campaign_characters.campaign_id AND owner_id = $2)
`

type RemoveCharacterFromEncounterParams struct {
	ID      int32
	OwnerID int32
}

func (q *Queries) RemoveCharacterFromEncounter(ctx context.Context, arg RemoveCharacterFromEncounterParams) error {
	_, err := q.db.ExecContext(ctx, removeCharacterFromEncounter, arg.ID, arg.OwnerID)
	return err
}

const searchCharacters = `-- name: SearchCharacters :many
SELECT id, owner_id, name, definition, sprite, created_at FROM characters WHERE name ilike $1
`

func (q *Queries) SearchCharacters(ctx context.Context, name string) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, searchCharacters, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Definition,
			&i.Sprite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaign = `-- name: UpdateCampaign :exec
UPDATE campaigns SET
  name = COALESCE($3, name),
  description = COALESCE($4, description)
WHERE id = $1 AND owner_id = $2
`

type UpdateCampaignParams struct {
	ID          int32
	OwnerID     int32
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) error {
	_, err := q.db.ExecContext(ctx, updateCampaign,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Description,
	)
	return err
}

const updateCharacter = `-- name: UpdateCharacter :exec
UPDATE characters SET
  name = $3
WHERE characters.id = $1 AND
EXISTS (SELECT id FROM characters WHERE characters.id = $1 AND characters.owner_id = $2)
`

type UpdateCharacterParams struct {
	ID      int32
	OwnerID int32
	Name    string
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacter, arg.ID, arg.OwnerID, arg.Name)
	return err
}

const updateEncounter = `-- name: UpdateEncounter :exec
UPDATE encounters SET
  name = $3,
  description = COALESCE($4, description),
  tilemap_id = COALESCE($5, tilemap_id)
WHERE encounters.id = $1 AND
EXISTS (SELECT id FROM campaigns WHERE campaigns.id = encounters.campaign_id AND owner_id = $2)
`

type UpdateEncounterParams struct {
	ID          int32
	OwnerID     int32
	Name        string
	Description sql.NullString
	TilemapID   sql.NullInt32
}

func (q *Queries) UpdateEncounter(ctx context.Context, arg UpdateEncounterParams) error {
	_, err := q.db.ExecContext(ctx, updateEncounter,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Description,
		arg.TilemapID,
	)
	return err
}
